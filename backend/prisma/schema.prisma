// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://user:password@db:5432/mydatabase"
}

model User {
  id                 Int      @id @default(autoincrement())
  firstName          String   @map("first_name")
  lastName           String   @map("last_name")
  email              String   @unique
  passwordHash       String   @map("password_hash")
  fitnessGoal        String?  @map("fitness_goal")
  gender             String?
  experienceLevel    String?  @map("experience_level")
  availableEquipment String?  @map("available_equipment")
  trainingFrequency  String?  @map("training_frequency")
  createdAt          DateTime @default(now()) @map("created_at")

  workoutPlans WorkoutPlan[]
  workoutSessions    WorkoutSession[]

  @@map("users")
}

model WorkoutPlan {
  id        Int          @id @default(autoincrement())
  planName  String
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  days      WorkoutDay[]

  @@map("workout_plans")
}

model WorkoutDay {
  id        Int               @id @default(autoincrement())
  dayNumber Int
  focus     String
  exercises WorkoutExercise[]
  plan      WorkoutPlan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    Int

  sessions  WorkoutSession[]

  @@map("workout_days")
}

model WorkoutExercise {
  id          Int        @id @default(autoincrement())
  sets        Int
  reps        String
  day         WorkoutDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId       Int

  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId  Int
  
  loggedSets  LoggedSet[] // NOWE: Link do zarejestrowanych serii

  @@map("workout_exercises")
}

model Exercise {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  targetMuscle      String?  @map("target_muscle") 
  equipment         String[]

  workoutExercises  WorkoutExercise[]

  @@map("exercises")
}

model WorkoutSession {
  id          Int       @id @default(autoincrement())
  startTime   DateTime  @default(now())
  endTime     DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutDay  WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId Int

  loggedSets  LoggedSet[]

  @@map("workout_sessions")
}

model LoggedSet {
  id            Int             @id @default(autoincrement())
  setNumber     Int
  weight        Float           @default(0.0)
  reps          Int             @default(0)
  
  session       WorkoutSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     Int
  
  exercise      WorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId    Int

  @@map("logged_sets")
}